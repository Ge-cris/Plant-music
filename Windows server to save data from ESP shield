/*
 The program is useful to create a server on a windows machine in order to receive data
 from an ESP wifi shield and save them to a .txt file.
  
   Before compiling and running the TCP Server:
 * Link the ws2_32.lib library in Run->Set Project Conf->Customised
 ->Linker->Add library: C:\MinGW\lib\libws2_32
 * Set the server PORT_NUMBER. It have to be the same on the shield sketch.
  
 * After compilation and before running the windows firewall must be set to allow the program to run on public networks.
 */

#include <stdio.h>
#include <winsock2.h>

#define PORT_NUMBER 12345
#define BUFFER_SIZE 254

int main() {
    WSADATA wsa;
    SOCKET server_fd, new_socket;
    struct sockaddr_in server, client;
    int c, recv_size;
    char buffer[BUFFER_SIZE];

    // Initialize Winsock
    if (WSAStartup(MAKEWORD(2, 2), &wsa) != 0) {
        printf("WSAStartup failed");
        return 1;
    }

    // Create socket
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == INVALID_SOCKET) {
        printf("Socket creation failed");
        return 1;
    }

    // Prepare the sockaddr_in structure
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons(PORT_NUMBER);

    // Bind
    if (bind(server_fd, (struct sockaddr *)&server, sizeof(server)) == SOCKET_ERROR) {
        printf("Bind failed");
        return 1;
    }

for(;;){
    // Listen
    listen(server_fd, 3);

    printf("Waiting for connections...\n");

    c = sizeof(struct sockaddr_in);
    if ((new_socket = accept(server_fd, (struct sockaddr *)&client, &c)) == INVALID_SOCKET) {
        printf("Accept failed");
        break;
    }

    // Received data from the client (Arduino ->ESP shield)
    if ((recv_size = recv(new_socket, buffer, BUFFER_SIZE, 0)) == SOCKET_ERROR) {
        printf("Receive failed");
    }
    printf("Received size = %d\n", recv_size);
    char message[recv_size];
    FILE* fp;
    
    for (int i=0; i<recv_size; i++){
        message[i]=buffer[i];
    }
    message[recv_size]='\0';
    fp = fopen("data_received.txt", "ab");
    fwrite (message, 1, recv_size, fp);
    fclose(fp);
    printf("Received data:\n%s\n", message);
    
}
    closesocket(new_socket);
    closesocket(server_fd);
    WSACleanup();

    return 0;
}
